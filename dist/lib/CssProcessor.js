// Generated by CoffeeScript 1.8.0
var CssProcessor, Processor, css, path, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Processor = require('./Processor');

css = require('css');

_ = require('lodash');

path = require('path');

CssProcessor = (function(_super) {
  __extends(CssProcessor, _super);

  function CssProcessor() {
    return CssProcessor.__super__.constructor.apply(this, arguments);
  }

  CssProcessor.prototype.process = function(content, sourceFile, outputFile, options) {
    var obj;
    obj = css.parse(content);
    this._processRules(obj.stylesheet.rules, sourceFile, outputFile, options);
    return css.stringify(obj);
  };

  CssProcessor.prototype._processRules = function(rules, sourceFile, outputFile, options) {
    return _.each(rules, (function(_this) {
      return function(rule) {
        if (rule.rules) {
          return _this._processRules(rule.rules, sourceFile, outputFile, options);
        } else {
          return _this._replace(rule, sourceFile, outputFile, options);
        }
      };
    })(this));
  };

  CssProcessor.prototype._replace = function(rule, sourceFile, outputFile, options) {
    return _.each(rule.declarations, (function(_this) {
      return function(decl) {
        var property;
        property = decl.property;
        if (!property) {
          return;
        }
        if (~property.indexOf('background') || ~property.indexOf('src')) {
          return _this._replaceUrl(decl, sourceFile, outputFile, options);
        } else if (~property.indexOf('filter')) {
          return _this._replaceFilter(decl, sourceFile, outputFile, options);
        }
      };
    })(this));
  };

  CssProcessor.prototype._replaceUrl = function(decl, sourceFile, outputFile, options) {
    var matches;
    if (matches = decl.value.match(/(url\([\'\"]?)([^\'\"\)]+)([\'\"]?\))/g)) {
      return _.each(matches, (function(_this) {
        return function(value) {
          var url, _matches;
          if (_matches = value.match(/(url\([\'\"]?)([^\'\"\)]+)([\'\"]?\))/)) {
            url = _matches[2];
            url = _this._getNewUrl(url, path.dirname(sourceFile), path.dirname(outputFile), options);
            url = "" + _matches[1] + url + _matches[3];
            return decl.value = decl.value.replace(value, url);
          }
        };
      })(this));
    }
  };

  CssProcessor.prototype._replaceFilter = function(decl, sourceFile, outputFile, options) {
    var matches, url;
    if (matches = decl.value.match(/(.*?src=[\'\"]?)([^\'\"\)]+)([\'\"]?.*)/)) {
      url = matches[2];
      url = this._getNewUrl(url, path.dirname(sourceFile), path.dirname(outputFile), options);
      return decl.value = "" + matches[1] + url + matches[3];
    }
  };

  return CssProcessor;

})(Processor);

module.exports = CssProcessor;
