// Generated by CoffeeScript 1.8.0
var Processor, Promise, fs, instance, loaderUtils, path, utils, _;

Promise = require('bluebird');

fs = require('fs');

_ = require('lodash');

loaderUtils = require('loader-utils');

utils = require('./utils');

path = require('path');

Processor = (function() {
  function Processor(files, map) {
    this.map = map != null ? map : {};
    this.setFiles(files);
  }


  /**
   * 写入处理后的文件
   */

  Processor.prototype.write = function(filename, options) {
    if (options == null) {
      options = {
        sourceContext: '',
        outputContext: ''
      };
    }
    return Promise.map(this.files, (function(_this) {
      return function(file) {
        return _this._readFile(file).then(function(content) {
          var outputFile, sourceFile;
          sourceFile = path.resolve(file);
          outputFile = path.resolve(_this._getFilename(filename, file, options.sourceContext, content || 'nocache'));
          _this.map[sourceFile] = outputFile;
          return Promise.join(_this.process(content, sourceFile, outputFile, options), outputFile);
        }).then(function(_arg) {
          var content, outputFile;
          content = _arg[0], outputFile = _arg[1];
          return utils.writeFile(outputFile, content);
        });
      };
    })(this));
  };


  /**
   * 处理文本
   */

  Processor.prototype.process = function(content, sourceFile, outputFile, options) {
    return content;
  };

  Processor.prototype._readFile = function(file) {
    return Promise.promisify(fs.readFile)(file, 'utf-8');
  };


  /**
   * 根据文件路径pattern，生成相应路径
   */

  Processor.prototype._getFilename = function(filePattern, file, context, content) {
    return loaderUtils.interpolateName({
      resourcePath: file
    }, filePattern, {
      content: content,
      context: context
    }).replace(/_\//g, '../');
  };


  /**
   * 获取替换路径
   */

  Processor.prototype._getNewUrl = function(url, sourcePath, outputPath, options) {
    var urlAbs;
    if (sourcePath == null) {
      sourcePath = '.';
    }
    if (outputPath == null) {
      outputPath = '.';
    }
    if (utils.isPathUrl(url)) {
      if (utils.isAbsolute(url)) {
        if (_.isObject(sourcePath)) {
          options = sourcePath;
        }
        if (!options.outputContext || !options.sourceContext) {
          throw new Error("" + url + " is an absolute path. You must provide `sourceContext` and `outputContext` ");
        }
        urlAbs = path.join(path.resolve(options.sourceContext), url);
        if (urlAbs = this.map[urlAbs]) {
          url = urlAbs.replace(path.resolve(options.outputContext), '');
        }
      } else {
        urlAbs = path.resolve(sourcePath, url);
        if (urlAbs = this.map[urlAbs]) {
          url = path.relative(outputPath, urlAbs);
        }
      }
    }
    return url;
  };


  /**
   * 获取map
   */

  Processor.prototype.getMap = function() {
    return this.map;
  };


  /**
  * 设置map
   */

  Processor.prototype.setMap = function(map, value) {
    if (value) {
      this.map[map] = value;
    } else {
      _.extend(this.map, map);
    }
    return this;
  };


  /**
   * 设置要处理的文件
   */

  Processor.prototype.setFiles = function(files) {
    this.files = _.isString(files) ? [files] : files;
    return this;
  };

  return Processor;

})();


/**
 * 单例
 */

instance = {};

Processor.getInstance = function(type) {
  Processor = require("./" + (utils.ucfirst(type)) + "Processor");
  return instance[type] != null ? instance[type] : instance[type] = new Processor;
};

module.exports = Processor;
