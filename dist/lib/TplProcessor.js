// Generated by CoffeeScript 1.8.0
var $, Processor, TplProcessor, path, utils,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Processor = require('./Processor');

$ = require('cheerio');

utils = require('./utils');

path = require('path');

TplProcessor = (function(_super) {
  __extends(TplProcessor, _super);

  function TplProcessor() {
    return TplProcessor.__super__.constructor.apply(this, arguments);
  }

  TplProcessor.prototype.process = function(content, sourceFile, outputFile, options) {
    $ = $.load(content);
    this._replaceMedia($, sourceFile, outputFile, options);
    this._replaceCss($, sourceFile, outputFile, options);
    this._repalceJs($, sourceFile, outputFile, options);
    return $.xml();
  };

  TplProcessor.prototype._replaceMedia = function($, sourceFile, outputFile, options) {
    return $('img').each((function(_this) {
      return function(i, elem) {
        return _this._replacePath($(elem), 'src', sourceFile, outputFile, options);
      };
    })(this));
  };

  TplProcessor.prototype._replaceCss = function($, sourceFile, outputFile, options) {
    $('link[rel="stylesheet"]').each((function(_this) {
      return function(i, elem) {
        return _this._replacePath($(elem), 'href', sourceFile, outputFile, options);
      };
    })(this));
    return $('style').each((function(_this) {
      return function(i, elem) {
        var $style, processor;
        $style = $(elem);
        if ($style.attr('_xprocess') === 'true') {
          processor = Processor.getInstance('css');
          $style.html(processor.process($style.html(), sourceFile, outputFile, options));
          return $style.removeAttr('_xprocess');
        }
      };
    })(this));
  };

  TplProcessor.prototype._repalceJs = function($, sourceFile, outputFile, options) {
    return $('script').each((function(_this) {
      return function(i, elem) {
        var $elem, processor;
        $elem = $(elem);
        if ($elem.attr('src')) {
          return _this._replacePath($elem, 'src', sourceFile, outputFile, options);
        } else if ($elem.attr('_xprocess') === 'true') {
          processor = Processor.getInstance('js');
          $elem.html(processor.process($elem.html(), sourceFile, outputFile, options));
          return $elem.removeAttr('_xprocess');
        }
      };
    })(this));
  };

  TplProcessor.prototype._replacePath = function(dom, prop, sourceFile, outputFile, options) {
    var value;
    if (value = dom.attr(prop)) {
      value = value.split('?')[0];
      value = this._getNewUrl(value, path.dirname(sourceFile), path.dirname(outputFile), options);
      return dom.attr(prop, value);
    }
  };

  return TplProcessor;

})(Processor);

module.exports = TplProcessor;
